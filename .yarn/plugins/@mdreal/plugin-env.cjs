/* eslint-disable */
//prettier-ignore
module.exports = {
name: "@mdreal/plugin-env",
factory: function (require) {
var plugin=(()=>{var Q=Object.create;var g=Object.defineProperty;var W=Object.getOwnPropertyDescriptor;var C=Object.getOwnPropertyNames;var X=Object.getPrototypeOf,Y=Object.prototype.hasOwnProperty;var Z=(e,n,t)=>n in e?g(e,n,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[n]=t;var a=(e=>typeof require<"u"?require:typeof Proxy<"u"?new Proxy(e,{get:(n,t)=>(typeof require<"u"?require:n)[t]}):e)(function(e){if(typeof require<"u")return require.apply(this,arguments);throw new Error('Dynamic require of "'+e+'" is not supported')});var S=(e,n)=>()=>(n||e((n={exports:{}}).exports,n),n.exports),K=(e,n)=>{for(var t in n)g(e,t,{get:n[t],enumerable:!0})},y=(e,n,t,i)=>{if(n&&typeof n=="object"||typeof n=="function")for(let o of C(n))!Y.call(e,o)&&o!==t&&g(e,o,{get:()=>n[o],enumerable:!(i=W(n,o))||i.enumerable});return e};var R=(e,n,t)=>(t=e!=null?Q(X(e)):{},y(n||!e||!e.__esModule?g(t,"default",{value:e,enumerable:!0}):t,e)),ee=e=>y(g({},"__esModule",{value:!0}),e);var D=(e,n,t)=>(Z(e,typeof n!="symbol"?n+"":n,t),t);var B=S((Ee,ne)=>{ne.exports={name:"dotenv",version:"16.0.3",description:"Loads environment variables from .env file",main:"lib/main.js",types:"lib/main.d.ts",exports:{".":{require:"./lib/main.js",types:"./lib/main.d.ts",default:"./lib/main.js"},"./config":"./config.js","./config.js":"./config.js","./lib/env-options":"./lib/env-options.js","./lib/env-options.js":"./lib/env-options.js","./lib/cli-options":"./lib/cli-options.js","./lib/cli-options.js":"./lib/cli-options.js","./package.json":"./package.json"},scripts:{"dts-check":"tsc --project tests/types/tsconfig.json",lint:"standard","lint-readme":"standard-markdown",pretest:"npm run lint && npm run dts-check",test:"tap tests/*.js --100 -Rspec",prerelease:"npm test",release:"standard-version"},repository:{type:"git",url:"git://github.com/motdotla/dotenv.git"},keywords:["dotenv","env",".env","environment","variables","config","settings"],readmeFilename:"README.md",license:"BSD-2-Clause",devDependencies:{"@types/node":"^17.0.9",decache:"^4.6.1",dtslint:"^3.7.0",sinon:"^12.0.1",standard:"^16.0.4","standard-markdown":"^7.1.0","standard-version":"^9.3.2",tap:"^15.1.6",tar:"^6.1.11",typescript:"^4.5.4"},engines:{node:">=12"}}});var q=S((ge,V)=>{var te=a("fs"),k=a("path"),se=a("os"),oe=B(),ie=oe.version,re=/(?:^|^)\s*(?:export\s+)?([\w.-]+)(?:\s*=\s*?|:\s+?)(\s*'(?:\\'|[^'])*'|\s*"(?:\\"|[^"])*"|\s*`(?:\\`|[^`])*`|[^#\r\n]+)?\s*(?:#.*)?(?:$|$)/mg;function ae(e){let n={},t=e.toString();t=t.replace(/\r\n?/mg,`
`);let i;for(;(i=re.exec(t))!=null;){let o=i[1],s=i[2]||"";s=s.trim();let r=s[0];s=s.replace(/^(['"`])([\s\S]*)\1$/mg,"$2"),r==='"'&&(s=s.replace(/\\n/g,`
`),s=s.replace(/\\r/g,"\r")),n[o]=s}return n}function P(e){console.log(`[dotenv@${ie}][DEBUG] ${e}`)}function ce(e){return e[0]==="~"?k.join(se.homedir(),e.slice(1)):e}function le(e){let n=k.resolve(process.cwd(),".env"),t="utf8",i=Boolean(e&&e.debug),o=Boolean(e&&e.override);e&&(e.path!=null&&(n=ce(e.path)),e.encoding!=null&&(t=e.encoding));try{let s=N.parse(te.readFileSync(n,{encoding:t}));return Object.keys(s).forEach(function(r){Object.prototype.hasOwnProperty.call(process.env,r)?(o===!0&&(process.env[r]=s[r]),i&&P(o===!0?`"${r}" is already defined in \`process.env\` and WAS overwritten`:`"${r}" is already defined in \`process.env\` and was NOT overwritten`)):process.env[r]=s[r]}),{parsed:s}}catch(s){return i&&P(`Failed to load ${n} ${s.message}`),{error:s}}}var N={config:le,parse:ae};V.exports.config=N.config;V.exports.parse=N.parse;V.exports=N});var me={};K(me,{default:()=>de});var d=a("path");var p=a("path"),c=a("fs"),T=R(q());var A=/\$(?:\{(.*)}|(.*))/;var pe=(e,n)=>async t=>{let i=await c.promises.readFile(t,"utf8"),o=(0,T.parse)(i);Object.entries(o).forEach(([s,r])=>{r.match(A)&&n.add(s)}),Object.assign(e,o)},w=async(e,n,t,i)=>{let o=(0,p.resolve)(n,".env"),s=(0,c.existsSync)(o),r=(0,p.resolve)(n,".env.prod"),h=(0,p.resolve)(n,".env.production"),l=(0,c.existsSync)(r),E=(0,c.existsSync)(h),b=(0,p.resolve)(n,".env.dev"),j=(0,p.resolve)(n,".env.development"),F=(0,c.existsSync)(b),$=(0,c.existsSync)(j),_=(0,p.resolve)(n,".env.test"),O=(0,p.resolve)(n,".env.testing"),G=(0,c.existsSync)(_),I=(0,c.existsSync)(O),v=pe(e,t);return s&&await v(o),e.NODE_ENV=e.NODE_ENV||i||"production",e.NODE_ENV==="production"&&(l&&await v(r),E&&await v(h)),e.NODE_ENV==="development"&&(F&&await v(b),$&&await v(j)),e.NODE_ENV==="test"&&(G&&await v(_),I&&await v(O)),e};var x=(e,n)=>{n.forEach(t=>(Object.entries(e).forEach(([i,o])=>{e[t].includes(i)&&(e[t]=e[t].replace(new RegExp(`\\$${i}|\\\${${i}}`,"g"),o))}),e))};var H=async(e,n)=>{let t=new Set,i=[process.cwd().split(d.sep)[0],""].join(d.sep),o=process.cwd(),s={};for(;o.split(d.sep).length>1&&(process.platform==="win32"?o!==i:o!==d.sep);)await w(s,o,t,n.NODE_ENV),o=(0,d.dirname)(o);t.size>0&&x(s,t),Object.assign(n,s)};var z=a("util"),m=a("path"),J=a("@yarnpkg/cli"),u=a("clipanion"),L=R(a("typanion"));var M=a("clipanion"),U=M.Command.Usage({description:"print environment variables",details:`
This command will print environment variables.

Environment variables are loaded from the following files:

 - .env

For NODE_ENV=production:  

 - .env.prod
 - .env.production

For NODE_ENV=development:  

 - .env.dev
 - .env.development

For NODE_ENV=test:  

 - .env.test
 - .env.testing
`.trimStart(),examples:[["Print environment variables","$0 env"],["Print environment variables for NODE_ENV=development","$0 env --env dev,development"],["Print environment variables for NODE_ENV=production","$0 env --env prod,production"],["Print environment variables for NODE_ENV=test","$0 env --env test,testing"],["Print environment as json","$0 env --json"],["Print environment as json-object","$0 env --json --object"],["Print environment as bash string (default)","$0 env --text"]],category:"Environment"});var f=class extends J.BaseCommand{text=u.Option.Boolean("--text",!0,{description:"Print environment as json"});json=u.Option.Boolean("--json",!1,{description:"Print environment as json"});object=u.Option.Boolean("--object,-o",!1,{description:"Print environment as javascript object. Uses with --json together"});envVar=u.Option.String("--envVar",null,{description:"Print and set environment variables for NODE_ENV",validator:L.isEnum(["production","development","testing","prod","dev","test"])});async execute(){let n=process.env.NODE_ENV,t=["development","dev"],i=["production","prod"],o=["testing","test"],s=t.includes(this.envVar)?"development":i.includes(this.envVar)?"production":o.includes(this.envVar)?"test":null,r={},h=[process.cwd().split(m.sep)[0],""].join(m.sep),l=process.cwd(),E=new Set;for(;l.split(m.sep).length>1&&(process.platform==="win32"?l!==h:l!==m.sep);)await w(r,l,E,n||s),l=(0,m.dirname)(l);E.size>0&&x(r,E);let b=Object.entries(r).map(([F,$])=>`${F}=${$}`).join(`
`),j=this.json?this.object?(0,z.inspect)(r,{colors:!0})+`
`:JSON.stringify(r,null,2):b;this.context.stdout.write(`${j}
`)}};D(f,"paths",[["env"]]),D(f,"usage",U);var ve={hooks:{setupScriptEnvironment:H},commands:[f]},de=ve;return ee(me);})();
return plugin;
}
};
